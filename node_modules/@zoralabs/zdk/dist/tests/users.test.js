"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const axios_mock_adapter_1 = tslib_1.__importDefault(require("axios-mock-adapter"));
const src_1 = require("../src");
jest.setTimeout(1000000);
describe('Users', () => {
    describe('getZoraProfiles', () => {
        const zoraProfilesApiUri = 'https://zora.co/api/users';
        describe('success', () => {
            it('makes a POST request to /api/users and returns data', async () => {
                let mock = new axios_mock_adapter_1.default(axios_1.default);
                mock.onPost(zoraProfilesApiUri).reply(200, [{ foo: 'bar' }]);
                const profiles = await src_1.getZoraProfiles(['test']);
                expect(profiles).toEqual([{ foo: 'bar' }]);
            });
        });
        describe('input validation', () => {
            it('raises if empty addresses', async () => {
                const spy = jest.spyOn(axios_1.default, 'post');
                try {
                    await src_1.getZoraProfiles([]);
                    throw new Error('should throw');
                }
                catch (err) {
                    expect(err).toEqual(Error('Empty addresses array'));
                }
                expect(spy).not.toHaveBeenCalled();
            });
            it('raises if too many addresses', async () => {
                const spy = jest.spyOn(axios_1.default, 'post');
                const addresses = Array.from(new Array(101), () => '0sdf987sdf');
                try {
                    await src_1.getZoraProfiles(addresses);
                    throw new Error('should throw');
                }
                catch (err) {
                    expect(err).toEqual(Error('Addresses array exceeds max length of 100'));
                }
                expect(spy).not.toHaveBeenCalled();
            });
        });
        describe('request error handling', () => {
            let mock;
            beforeEach(() => {
                mock = new axios_mock_adapter_1.default(axios_1.default);
            });
            it('throws with error message from response', async () => {
                mock.onPost(zoraProfilesApiUri).reply(400, 'Custom error message from zora api');
                try {
                    await src_1.getZoraProfiles(['asdf', '1234']);
                    throw new Error('should throw');
                }
                catch (err) {
                    expect(err).toEqual(Error('Custom error message from zora api'));
                }
            });
            it('raises if axios request fails', async () => {
                mock.onPost(zoraProfilesApiUri).networkError();
                try {
                    await src_1.getZoraProfiles(['asdf', '1234']);
                    throw new Error('should throw');
                }
                catch (err) {
                    expect(err).toEqual(Error('Network Error'));
                }
            });
            it('raises if axios response has no data', async () => {
                mock.onPost(zoraProfilesApiUri).reply(200, null);
                try {
                    await src_1.getZoraProfiles(['asdf', '1234']);
                    throw new Error('should throw');
                }
                catch (err) {
                    expect(err).toEqual(Error('Error retrieving users'));
                }
            });
            it('raises if axios response data is not a list', async () => {
                mock.onPost(zoraProfilesApiUri).reply(200, {});
                try {
                    await src_1.getZoraProfiles(['asdf', '1234']);
                    throw new Error('should throw');
                }
                catch (err) {
                    expect(err).toEqual(Error('Error retrieving users'));
                }
            });
            it('raises if axios response data is empty', async () => {
                mock.onPost(zoraProfilesApiUri).reply(200, []);
                try {
                    await src_1.getZoraProfiles(['asdf', '1234']);
                    throw new Error('should throw');
                }
                catch (err) {
                    expect(err).toEqual(Error('Error retrieving users'));
                }
            });
        });
    });
});
//# sourceMappingURL=users.test.js.map